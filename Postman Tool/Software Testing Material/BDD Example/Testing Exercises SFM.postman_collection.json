{
	"info": {
		"_postman_id": "fa6fe312-6633-48f5-ac20-305b584375c5",
		"name": "Testing Exercises SFM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29236140"
	},
	"item": [
		{
			"name": "Get Request Positive Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Request Positive With Name Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check if user with id1 is Leanne Graham\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.eql(\"Leanne Graham\");\r",
							"});\r",
							"pm.test(\"Check if user with id2 is Ervin Howell\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].name).to.eql(\"Ervin Howell\");\r",
							"});\r",
							"pm.test(\"Check if user with id3 is Karina\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].name).to.eql(\"MJF\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Request Negative Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/usersz",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"usersz"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Request Positive Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 11,\r\n    \"name\": \"Rajkumar SM\",\r\n    \"username\": \"stm\",\r\n    \"email\": \"raj@softwaretestingmaterial.com\",\r\n    \"address\": {\r\n      \"street\": \"X Roads\",\r\n      \"suite\": \"Apt. 007\",\r\n      \"city\": \"Hyderabad\",\r\n      \"zipcode\": \"600007\",\r\n      \"geo\": {\r\n        \"lat\": \"10.0000\",\r\n        \"lng\": \"80.0000\"\r\n      }\r\n    },\r\n    \"phone\": \"1-2345-6-7890\",\r\n    \"website\": \"softwaretestingmaterial.com\",\r\n    \"company\": {\r\n      \"name\": \"Software Testing Material\",\r\n      \"catchPhrase\": \"A blog for Software Testers\",\r\n      \"bs\": \"real-time tutorials\"\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Request Negative Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 11,\r\n    \"name\": \"Rajkumar SM\",\r\n    \"username\": \"stm\",\r\n    \"email\": \"raj@softwaretestingmaterial.com\",\r\n    \"address\": {\r\n      \"street\": \"X Roads\",\r\n      \"suite\": \"Apt. 007\",\r\n      \"city\": \"Hyderabad\",\r\n      \"zipcode\": \"600007\",\r\n      \"geo\": {\r\n        \"lat\": \"10.0000\",\r\n        \"lng\": \"80.0000\"\r\n      }\r\n    },\r\n    \"phone\": \"1-2345-6-7890\",\r\n    \"website\": \"softwaretestingmaterial.com\",\r\n    \"company\": {\r\n      \"name\": \"Software Testing Material\",\r\n      \"catchPhrase\": \"A blog for Software Testers\",\r\n      \"bs\": \"real-time tutorials\"\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/userszzzzzz",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"userszzzzzz"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Request By Using Parameter Positive Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Request By Using Parameter Negative Test Case (SFM)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/usersx",
					"host": [
						"{{url}}"
					],
					"path": [
						"usersx"
					]
				}
			},
			"response": []
		},
		{
			"name": "imgur Oauth 2.0 Authorization",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.imgur.com/3/account/me/images",
					"protocol": "https",
					"host": [
						"api",
						"imgur",
						"com"
					],
					"path": [
						"3",
						"account",
						"me",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Extracting Data From Responses and Chaining Requests Part 1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "httpbin.org/uuid",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						"uuid"
					]
				}
			},
			"response": []
		},
		{
			"name": "Extracting Data From Responses and Chaining Requests Part 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// access the response body\r",
							"const response = pm.response.json();\r",
							"\r",
							"//Saved as a global variable. Other requests can access this info as well.\r",
							"pm.globals.set(\"orderId\", response.uuid);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n\"orderId\": \"{{orderId}}\",\r\n\"products\": [\r\n                {\r\n                        \"quantity\": 20,\r\n   \"productId\": 3000\r\n  },\r\n  {\r\n   \"quantity\": 10,\r\n   \"productId\": 2000\r\n  }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "httpbin.org/post",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Data-Driven Testing in Postman",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\" , function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var em = pm.variables.get(\"email\");\r",
							"var pwd = pm.variables.get(\"password\");\r",
							"\r",
							"pm.test(\"Check email \" +em, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(em);\r",
							"});\r",
							"\r",
							"pm.test(\"Check password \" +pwd, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.password).to.eql(pwd);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register/prepod",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register",
						"prepod"
					]
				}
			},
			"response": []
		}
	]
}